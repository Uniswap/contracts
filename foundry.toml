[profile.default]
src = "src"
out = "out"
libs = ["lib"]
verbosity = 2
bytecode_hash = "none"

fs_permissions = [
  { access = "read-write", path = ".forge-snapshots"},
  { access = "read", path = "script/" },
  { access = "read-write", path = "script/deploy/tasks" },
  { access = "read", path = "out/" }
]

skip = [
  "src/pkgs/**/audits/**",
  "src/pkgs/**/certora/**",
  "src/pkgs/**/lib/**",
  "src/pkgs/**/test/**",
  "src/pkgs/universal-router/permit2/**",
  "src/pkgs/universal-router/solmate/**",
  "src/pkgs/**/*.s.sol",
  "*.t.sol",
]

additional_compiler_profiles = [
  { name = "v4", optimizer_runs = 44444444, via_ir = true, evm_version = "cancun" },
  { name = "v4-descriptor", optimizer_runs = 1, via_ir = true, evm_version = "cancun" },
  { name = "v2", optimizer_runs = 999999 },
  { name = "v3-core", optimizer_runs = 800, evm_version = "istanbul", via_ir = false },
  { name = "v3-periphery-lowest", optimizer_runs = 1000, evm_version = "istanbul", via_ir = false },
  { name = "v3-periphery-low", optimizer_runs = 2000, evm_version = "istanbul", via_ir = false },
  { name = "v3-periphery-default", optimizer_runs = 1000000, evm_version = "istanbul", via_ir = false },
  { name = "permit2", optimizer_runs = 1000000, via_ir = true },
  { name = "uniswapx", optimizer_runs = 1000000, via_ir = false },
]

compilation_restrictions = [
  # v2
  { paths = "src/pkgs/v2-core/contracts/[!i]*.sol", version = "0.5.16", optimizer_runs = 999999 },
  { paths = "src/pkgs/v2-periphery/contracts/[!i]*.sol", version = "0.6.6", optimizer_runs = 999999 },
  # v3
  { paths = "src/pkgs/v3-core/contracts/{UniswapV3Factory,UniswapV3Pool}.sol", optimizer_runs = 800 },
  { paths = "src/**/v3-core/**/libraries/TickBitmap.sol", version = "<0.8.0" },
  { paths = "src/pkgs/v3-periphery/contracts/lens/*.sol", version = "0.7.6", via_ir = false, optimizer_runs = 1000000 },
  { paths = "src/pkgs/v3-periphery/contracts/NonfungiblePositionManager.sol", optimizer_runs = 2000 },
  { paths = "src/pkgs/v3-periphery/contracts/NonfungibleTokenPositionDescriptor.sol", optimizer_runs = 1000 },
  # TODO: NFTDescriptor only compiles with 200 runs
  { paths = "src/pkgs/v3-periphery/contracts/libraries/NFTDescriptor.sol", optimizer_runs = 1000 },
  { paths = "src/pkgs/v3-periphery/contracts/*.sol", version = "0.7.6", via_ir = false, max_optimizer_runs = 1000000 },
  { paths = "src/**/v3-periphery/**/libraries/**", version = "<0.8.0" },
  # permit2
  { paths = "src/pkgs/permit2/src/**", version = "0.8.17", via_ir = true },
  # v4
  { paths = "src/pkgs/v4-periphery/src/PositionDescriptor.sol", optimizer_runs = 1, version = "0.8.26" },
  { paths = "src/pkgs/v4-periphery/src/[!i]|[!l]*.sol", version = "0.8.26", via_ir = true, evm_version = "cancun", optimizer_runs = 44444444 },
  { paths = "src/pkgs/v4-periphery/src/libraries/Locker.sol", evm_version = "cancun" },
  { paths = "src/pkgs/v4-core/src/**", version = "0.8.26", via_ir = true, evm_version = "cancun", max_optimizer_runs = 44444444 },
  { paths = "src/pkgs/v4-core/src/[!i]|[!l]|[!t]*.sol", version = "0.8.26", via_ir = true, evm_version = "cancun", optimizer_runs = 44444444 },
  # router
  { paths = "src/pkgs/universal-router/contracts/**", via_ir = true },
  { paths = "src/pkgs/swap-router-contracts/contracts/**", version = "0.7.6", via_ir = false, optimizer_runs = 1000000 },
  # X
  { paths = "src/pkgs/uniswapx/src/base/BlockNumberish.sol", version = "0.8.24" },
  # Briefcase
  { paths = "src/briefcase/protocols/v2-periphery/libraries/UniswapV2Library.sol", version = "<0.8.0" },
  { paths = "src/briefcase/protocols/lib-external/solidity-lib/**", version = "<0.8.0" },
  { paths = "src/briefcase/protocols/v4-core/libraries/**", evm_version = "cancun" },
  { paths = "src/briefcase/protocols/v4-periphery/libraries/Locker.sol", evm_version = "cancun" },
  { paths = "src/briefcase/protocols/swap-router-contracts/libraries/**", version = "<0.8.0" },
  # script
  { paths = "script/deploy/Deploy-all.s.sol", via_ir = true },
]

[fmt]
line_length = 120
tab_width = 4
quote_style = "single"
sort_imports = true
number_underscore = "thousands"

[rpc_endpoints]
anvil = "http://127.0.0.1:8545"
sepolia = "https://sepolia.infura.io/v3/${INFURA_KEY}"

[etherscan]
sepolia = { key = "${ETHERSCAN_API_KEY}" }

# See more config options https://github.com/foundry-rs/foundry/tree/master/config